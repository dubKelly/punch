#!/usr/bin/env python3

import collections
import json
import os.path
import sys
import getpass
import datetime

user = getpass.getuser()
date = str(datetime.datetime.now().date())
time = str(datetime.datetime.now().time())[:8]
filename = 'punchcard.json'

def parse_args():
  for arg in sys.argv[1:]:
    if arg == 'in' or arg == 'out':
      punch(arg)
    elif arg == '-d' or arg == '--display':
      display()

def punch(option):
  clock = {
    user: {
      date: {
        time: option
      }
    }
  }

  # check if file exists
  if not os.path.exists('./' + filename):
    write_file(filename, clock, 'w+', option)
    print("Punched {option} at {time} on {date}")
  else:
    with open(filename, 'r') as punchcard:
      punch_card = json.load(punchcard)
      #check if current user has punched in before
      if user in punch_card:
        # check if user has punched in today
        if date in punch_card[user]:
          index = len(punch_card[user][date]) - 1
          status = list(collections.OrderedDict(punch_card[user][date]).items())[index][1]
          # make sure user isn't punching in/out twice
          if not status == clock[user][date][time]:
            new_time = {**punch_card[user][date], **clock[user][date]}
            punch_card[user][date] = collections.OrderedDict(sorted(new_time.items()))

            write_file(filename, punch_card, 'w', option)
          else:
            print(f"You're already punched {status}")

        else:
          new_date = {**punch_card[user], **clock[user]}
          punch_card[user] = collections.OrderedDict(sorted(new_date.items()))

          write_file(filename, punch_card, 'w', option)
      else:
        punch_card = {**punch_card, **clock}

        write_file(filename, punch_card, 'w', option)

def write_file(_file, update, mode, option):
  with open(_file, mode) as punchcard:
    json.dump(update, punchcard, indent=2)
    print(f"Punched {option} at {time} on {date}")

def display():
  with open(filename, 'r') as punchcard:
    punch_card = json.load(punchcard)

    total_hours(punch_card)

def total_hours(punchcard):
  sfm_list = []
  sfm_total = 0

  for days, hours in punchcard[user].items():
    # convert string to seconds from midnight
    for k, v in hours.items():
      sfm_hr = int(k[:2]) * 60 ** 2
      sfm_min = int(k[3:5]) * 60
      sfm_sec = int(k[6:])
      sfm = sfm_hr + sfm_min + sfm_sec

      sfm_list.append(sfm)
  for i in sfm_list:
    index = sfm_list.index(i)

    if not index % 2 == 0:
      sfm_total += i - sfm_list[index - 1]

  total_hr = int(sfm_total / 3600)
  total_min = int((sfm_total - (total_hr * 3600)) / 60)
  total_sec = int(sfm_total - ((total_hr * 3600) + (total_min * 60)))
  total = f"{total_hr}:{total_min}:{total_sec}"

  print(f"Total Hours: {total}")

def main():
  parse_args()

main()
