#!/usr/bin/env python3

import collections
import json
import os.path
import sys
import getpass
import datetime

def parse_args():
  for arg in sys.argv[1:]:
    if arg == 'in' or arg == 'out':
      punch(arg)

def punch(option):
  user = getpass.getuser()
  date = str(datetime.datetime.now().date())
  time = str(datetime.datetime.now().time())[:8]
  filename = 'punchcard.json'

  clock = {
    user: {
      date: {
        time: option
      }
    }
  }

  # check if file exists
  if not os.path.exists('./' + filename):
    write_file(filename, clock, 'w+')
  else:
    with open(filename, 'r') as punchcard:
      punch_card = json.load(punchcard)
      #check if current user has punched in before
      if user in punch_card:
        # check if user has punched in today
        if date in punch_card[user]:
          index = len(punch_card[user][date]) - 1
          status = list(collections.OrderedDict(punch_card[user][date]).items())[index][1]
          # make sure user isn't punching in/out twice
          if not status == clock[user][date][time]:
            time = {**punch_card[user][date], **clock[user][date]}
            punch_card[user][date] = collections.OrderedDict(sorted(time.items()))

            write_file(filename, punch_card, 'w')
          else:
            print(f"You're already punched {status}")

        else:
          new_date = {**punch_card[user], **clock[user]}
          punch_card[user] = collections.OrderedDict(sorted(new_date.items()))

          write_file(filename, punch_card, 'w')
      else:
        punch_card = {**punch_card, **clock}

        write_file(filename, punch_card, 'w')

def write_file(_file, update, mode):
  with open(_file, mode) as punchcard:
    json.dump(update, punchcard, indent=2)

def main():
  parse_args()

main()
